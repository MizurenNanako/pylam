if __name__ != '__main__':
    print('This script should be run directly and not be used from import.')
    exit(-1)

# -- WARN: following code are generated by gpt-4o, unchecked by human. ---

import argparse
import sys
import os
from typing import Optional, TextIO


def parse_arguments() -> argparse.Namespace:
    """Parses and returns command-line arguments."""
    # Initialize the argument parser
    parser = argparse.ArgumentParser(
        description="Process input and output options.")

    # Define the --input and -i arguments for specifying input file
    parser.add_argument(
        "--input", "-i", type=str, help="Specify the input filename"
    )

    # Define the --output and -o arguments for specifying output file
    parser.add_argument(
        "--output", "-o", type=str,
        help=("Specify the output filename. "
              "Defaults to input filename with '_out.py' suffix if not set.")
    )

    # Define the --stdin flag, which conflicts with --input
    parser.add_argument(
        "--stdin", action="store_true",
        help="Read from standard input. Conflicts with --input. "
             "Used as default if --input is not provided."
    )

    # Define the --stdout flag to print to stdout instead of a file
    parser.add_argument(
        "--stdout", action="store_true",
        help="Print output to standard output instead of a file. "
             "Used as default if --stdin is enabled and --output is unset."
    )

    # Parse arguments
    args = parser.parse_args()

    # Conflict checking for --input and --stdin
    if args.input and args.stdin:
        parser.error("Cannot use --input and --stdin at the same time.")

    # Set default behavior if no --input or --stdin is provided
    if not args.input:
        args.stdin = True

    # Set default output file if none is provided and --stdout is not set
    if not args.output:
        if args.stdin:
            args.stdout = True  # Default to stdout if reading from stdin and no output file is provided
        elif args.input:
            base, _ = os.path.splitext(args.input)
            args.output = f"{base}_out.py"

    return args


def open_input_stream(input_file: Optional[str], use_stdin: bool) -> TextIO:
    """Opens and returns the input stream based on input file or stdin.

    Args:
        input_file: The input filename, or None if using stdin.
        use_stdin: A flag to indicate if stdin should be used.

    Returns:
        A file-like object (TextIO) for reading.
    """
    if use_stdin:
        return sys.stdin
    else:
        return open(input_file, "r")


def open_output_stream(output_file: Optional[str], use_stdout: bool) -> TextIO:
    """Opens and returns the output stream based on output file or stdout.

    Args:
        output_file: The output filename, or None if using stdout.
        use_stdout: A flag to indicate if stdout should be used.

    Returns:
        A file-like object (TextIO) for writing.
    """
    if use_stdout:
        return sys.stdout
    else:
        return open(output_file, "w")


def entry(input_stream: TextIO, output_stream: TextIO) -> None:
    """Processes input data and writes to output stream.

    Args:
        input_stream: A readable stream for input python code.
        output_stream: A writable stream for output python code.

    Returns:
        None
    """
    # Placeholder function for actual processing logic
    for line in input_stream:
        output_stream.write(line)


def main() -> None:
    """Main function to handle argument parsing and file processing."""
    args = parse_arguments()

    # Open the input and output streams based on parsed arguments
    input_stream = open_input_stream(args.input, args.stdin)
    output_stream = open_output_stream(args.output, args.stdout)

    # Execute the entry function
    try:
        entry(input_stream, output_stream)
    finally:
        # Close file handles if they're not stdin/stdout
        if input_stream is not sys.stdin:
            input_stream.close()
        if output_stream is not sys.stdout:
            output_stream.close()
            
main()

# --- NOTE: following code are hand written by myself ---